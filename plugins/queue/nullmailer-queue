#! perl -w

=head1 NAME

nullmailer-queue

=head1 DESCRIPTION

This plugin uses Bruce Guentner's nullmailer to store and forward mails.
It was modified from the qmail-queue plugin.  It's similar to qmail-queue,
but the message and headers are all passed on fd0.

=head1 CONFIG

It takes one optional parameter, the location of nullmailer-queue.
This makes it easy to configure for different packaging strategies.
The location defaults to /usr/sbin/nullmailer-queue.

  queue/nullmailer-queue  /usr/local/sbin/nullmailer-queue

=cut

use POSIX ();

sub register {
  my ($self, $qp, @args) = @_;

  if (@args > 0) {
    $self->{_queue_exec} = $args[0];
    $self->log(LOGCRIT, "Ignoring additional arguments.") if (@args > 1);
  }
  else {
    $self->{_queue_exec} = "/usr/sbin/nullmailer-queue";
  }
}

sub hook_queue {
  my ($self, $transaction) = @_;

  pipe(MESSAGE_READER, MESSAGE_WRITER) or fault("Could not create message pipe"), exit;

  my $child = fork();

  not defined $child and fault(451, "Could not fork"), exit;

  if ($child) {
    # We are the parent
    my $oldfh = select(MESSAGE_WRITER); $| = 1; 
    select($oldfh);

    close MESSAGE_READER  or fault("close msg reader fault"),exit;

    my @rcpt = map { $_->address } $transaction->recipients;
    my $from = ($transaction->sender->address|| "" );
    print MESSAGE_WRITER "$from\n", join("\n",@rcpt), "\n\n"
      or return(DECLINED,"Could not print addresses to queue");

    $transaction->header->print(\*MESSAGE_WRITER);
    $transaction->body_resetpos;
    while (my $line = $transaction->body_getline) {
      print MESSAGE_WRITER $line;
    }
    close MESSAGE_WRITER;

    waitpid($child, 0);
    my $exit_code = $?;
    if (POSIX::WIFEXITED($exit_code) && POSIX::WEXITSTATUS($exit_code) == 0) {
      my $msg_id = $transaction->header->get('Message-Id') || '';
      $msg_id =~ s/[\r\n].*//s;  # don't allow newlines in the Message-Id here
      return (OK, "Queued! $msg_id");
    }
    return(DECLINED, "Unable to queue message ($exit_code)");
  }
  elsif (defined $child) {
    # Child
    close MESSAGE_WRITER or exit 1;
    
    # Untaint $self->{_queue_exec}
    my $queue_exec = $self->{_queue_exec};
    if ($queue_exec =~ /^(\/[\/\-\_\.a-z0-9A-Z]*)$/) {
      $queue_exec = $1;
    } else {
      $self->log(LOGCRIT, "FATAL ERROR: Unexpected characters in nullmailer-queue plugin argument");
      exit 3;
    }

    # save the original STDIN in case exec() fails below
    open(SAVE_STDIN, "<&STDIN");

    POSIX::dup2(fileno(MESSAGE_READER), 0) or die "Unable to dup MESSAGE_READER: $!";

    $self->log(LOGDEBUG, "Queuing to $queue_exec");

    my $rc = exec $queue_exec;

    # restore the original STDIN
    open(STDIN, "<&SAVE_STDIN");

    # NB: The "if not $rc" is redundant since exec() won't return if it
    # succeeds.
    $self->log(LOGCRIT, "FATAL ERROR: unable to exec $queue_exec");
    exit 6 if not $rc;
  }
}
