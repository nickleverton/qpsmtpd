#! /usr/bin/perl -w
=head1 NAME

SPF - plugin to implement Sender Policy Framework

=head1 SYNOPSIS

  # in config/plugins
  sender_permitted_from

Or if you wish to issue 5xx on SPF fail:

  sender_permitted_from spf_deny 1

Other arguments are 'trust 0' and 'guess 0'. These turn off processing of 
spf.trusted-forwarders.org and the best_guess functionality. It is unlikely 
that you want to turn these off.

Adding 'spf_deny 2' will also issue a 5xx on a softfail response.

You can also specify local SPF policy with 

    include '<spf mechanism list>'

You can override the default rejection policy for specified addresses or domains using
the B<whitelist_spf> configuration file.  

=over 4

=item whitelist_spf

B<whitelist_spf> is a list of domains or addresses to which a different
SPF policy should be applied.  Each line in the file contains a single
address or domain name, then a colon, then the B<spf_deny> level to
be used.  For example, assuming the plugin's spf_deny option is set to 1,

  example.com:0
  nowhere.mil:2

In this example, mail from example.com will always be accepted.
Mail from nowhere.mil will be rejected with a 5xx response for both fail
and softfail.

=back

=head1 BUGS

This plugin should be renamed sender_policy_framework.

=head1 SEE ALSO

Sender Policy Framework, L<http://www.openspf.org/>

=cut

use Mail::SPF::Query 1.991;

sub register {
  my ($self, $qp, @args) = @_;
  %{$self->{_args}} = @args;
}

sub hook_mail {
  my ($self, $transaction, $sender) = @_;

  return (DECLINED) unless ($sender->format ne "<>"
                            and $sender->host && $sender->user);

  # If we are receving from a relay permitted host, then we are probably
  # not the delivery system, and so we shouldn't check

  return (DECLINED) if $self->qp->connection->relay_client();

  my $host = lc $sender->host;
  my $from = $sender->user . '@' . $host;

  my $deny;
  grep { my $domain;
         ($domain,$deny) = ($_ =~ /(.*):(\d)$/)
	  and $domain eq $from || $domain eq $host } $self->qp->config("whitelist_spf")
    or $deny = $self->{_args}{spf_deny};
  $self->log(LOGDEBUG, "SPF failure policy is $deny");

  my $ip = $self->qp->connection->remote_ip;
  my $helo = $self->qp->connection->hello_host;

  my $query = Mail::SPF::Query->new(ip => $ip, sender => $from, helo => $helo,
		sanitize => 1,
		local => $self->{_args}{local},
		guess => defined($self->{_args}{guess}) ? $self->{_args}{guess} : 1,
		trusted => defined($self->{_args}{trust}) ? $self->{_args}{trust} : 1) 
    || die "Couldn't construct Mail::SPF::Query object";
  $transaction->notes('spfquery', $query);
               
  return (DECLINED);
}

sub hook_rcpt {
  my ($self, $transaction, $rcpt) = @_;
  
  # special addresses don't get SPF-tested.
  return DECLINED if $rcpt and $rcpt->user and $rcpt->user =~ /^(?:postmaster|abuse|mailer-daemon|root)$/i;
  
  my $query = $transaction->notes('spfquery');

  return DECLINED if !$query;
  my ($result, $smtp_comment, $comment) = $query->result2($rcpt->address);
  
  if ($result eq "error") {
    return (DENYSOFT, "SPF error: $smtp_comment");
  }

  if ($result eq "fail" and $self->{_args}{spf_deny}) {
    return (DENY, "SPF forgery: $smtp_comment");
  }

  if ($result eq "softfail" and $self->{_args}{spf_deny} > 1) {
    return (DENY, "SPF probable forgery: $smtp_comment.  If you are using an address on Hotmail, MSN or other webmail service, please re-send your email using their mail server" );
  }

  if ($result eq 'fail' or $result eq 'softfail') {
    $self->log(LOGNOTICE, "SPF result for $rcpt->address was $result: $comment");
  }
   
  return DECLINED;
}

sub _uri_escape {
  my $str = shift;
  $str =~ s/([^A-Za-z0-9\-_.!~*\'()])/sprintf "%%%X", ord($1)/eg;
  return $str;
}

sub hook_data_post {
  my ($self, $transaction) = @_;

  my $query = $transaction->notes('spfquery');
  return DECLINED if !$query;

  my ($result, $smtp_comment, $comment) = $query->message_result2();

  $self->log(LOGDEBUG, "result was $result: $comment") if ($result);

  $transaction->header->add('Received-SPF' => "$result ($comment)", 0);

  return DECLINED;
}

