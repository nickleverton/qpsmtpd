#!/usr/bin/perl -w

use POSIX qw();

my $config_binary;

my $config_compat;

my $config_saslenv;

my $config_exec = '/bin/true';
 
sub register {
    my( $self, $qp, @args ) = @_;

    my $methods = "plain,login";

    while (my $key = shift @args) {

	my $value;
	if ($key =~ /^(.*?)=(.*)$/) {
	    ($key,$value) = ($1,$2);
	}

	if ($key eq 'binary') {
	    $self->log(LOGWARN, "$key: needs a parameter"), next unless defined $value;
	    $config_binary = $value;

	} elsif ($key eq 'methods') {
	    $self->log(LOGWARN, "$key: needs a parameter"), next unless defined $value;
	    $methods = $value;

	} elsif ($key eq 'saslenv') {
	    $self->log(LOGWARN, "$key: needs a parameter"), next unless defined $value;
	    ($config_saslenv) = ( $value =~ /^(.*)$/ );	# untaint

	} elsif ($key eq 'exec') {
	    $self->log(LOGWARN, "$key: needs a parameter"), next unless defined $value;
	    ($config_exec) = ( $value =~ /^(.*)$/ );	# untaint

	} elsif ($key eq 'compat') {
	    $self->log(LOGWARN, "$key: needs a parameter"), next unless defined $value;
	    $config_compat = $value;

	} else {
	    $self->log(LOGERROR, "Unknown option $key");
	}
    }

    foreach ( split(",",$methods) ) {
	    $self->register_hook( "auth-". lc $_, "authcpw");
    }

    $self->log(LOGINFO, "checkpassword ".($config_binary ? "with $config_binary " : "").
    	"supporting $methods");

}

sub authcpw {
    my ( $self, $transaction, $method, $user, $passClear, $passHash, $ticket ) =
      @_;

    $self->log(LOGDEBUG,"method:$method, user:$user, passClear:$passClear, passHash:$passHash, ticket:$ticket");

    $config_binary = $self->qp->config("smtpauth-checkpassword") unless defined $config_binary;
    $self->log(LOGERROR, "Binary $config_binary not found or not executable"), return (DECLINED)
    	unless $config_binary && -x $config_binary;

    my ($untainted) = $config_binary =~ /^(.*)$/;

    my $sasl = "";
    if (defined $config_saslenv) {
	$method =~ /^(.*)$/;
	$sasl = ($method eq 'login' ? "plain" : $1);
	$sasl = $config_saslenv."=\L$sasl\E";
    }

    my @params;
    if (defined $passClear) {
    	@params = ($user, $passClear, time() );
    } elsif (! $config_compat) {
    	@params = ($user, $passHash, $ticket);
    } else {
    	@params = ($user, $ticket, $passHash);
    }

    $self->log(LOGDEBUG,"Calling $sasl $untainted $config_exec");
    open(CPW,"|-", "$sasl $untainted $config_exec 3<&0")
        or $self->log(LOGERROR, "Unable to execute $config_binary: $!"), return(DECLINED);

    printf(CPW "%s\0%s\0%s\0", @params);
    close(CPW);

    $self->log(LOGNOTICE, "Authentication failed for $user with $method: $?"), return(DECLINED)
    	unless POSIX::WIFEXITED($?) && 0 == POSIX::WEXITSTATUS($?);

    $self->log(LOGINFO, "Authenticated connection for $user with $method");
    return ( OK, "checkpassword" );
}

=head1 NAME

auth/checkpassword

=head1 DESCRIPTION

This plugin implements SMTP AUTH for qpsmtpd using the
checkpassword authentication interface, originally defined at
L<http://cr.yp.to/checkpwd/interface.html>.

It supports both common checkpassword interfaces, see L<COMPATIBILITY>
below.

It should be perfectly possible to run more than one instance of this
plugin configured with different checkpassword programs, if no one of
them does everything you want.

=head1 CONFIGURATION

The following parameters can be passed to auth/checkpassword on the
plugin line:

=over 4

=item binary=I<pathname>

The full path to the checkpassword executable.  If not given, the path
to the binary will be read from config file I<smtpauth-checkpassword>.

=item methods=I<plain,login,cram-md5>

A comma-separated list of authentication methods supported by
the particular checkpassword implementation.  The default list is
B<plain,login> as for standard checkpassword.  This plugin itself will
forward any methods supported by qpsmtpd.

=item saslenv=I<name>

The name of an environment variable into which the authentication
method will be placed, e.g. 'saslenv SASL'.  I<name> is case sensitive.
Default is not to set an environment variable for this.

=item exec=I<pathname>

The full path to true(1), which will be passed to checkpassword as a
dummy program to execute.  Default is B</bin/true>

=item compat=I<[ 0 | 1]>

Compatibility function.  B<compat 0> specifies vanilla checkpassword
interface as used by checkpassword itself, vpasswd from vpopmail, and
Erwin Hoffmann's cmd5checkpw 0.30

 login name terminated by \0, encrypted password terminated by \0,
 cryptographic key terminated by \0

B<compat 1> specifies vanilla interface for cleartext authentication
but modified checkpassword interface for cryptographic authentication
as used by L<http://members.elysium.pl/brush/qmail-smtpd-auth>, i.e.

 login name terminated by \0, cryptographic key terminated by \0,
 encrypted password terminated by \0

For more background on the need for this, see L<COMPATIBILITY> below.

=back

=head1 EXAMPLE

The following plugin line implements SMTP authentication using the
checkqpassword program from qpasswd.  Auth types PLAIN, LOGIN and CRAM-MD5
will be offered to the client, and the one chosen by the client will be
passed to checkqpassword in environment variable SASL.

  auth/checkpassword binary=/bin/checkqpasswd compat=1 methods=plain,login,cram-md5 saslenv=SASL

=head1 COMPATIBILITY

Unfortunately there are two commonly-used interfaces
to B<checkpassword>.  Read up at Erwin Hoffmann's site
L<http://www.fehcom.de/qmail/smtpauth.html#IMPLEMENTATION> for background.

The following implementations are known to use 'compat 0' interface:

=over 4

vchkpw from vpopmail, L<http://www.inter7.com/index.php?page=vpopmail>

cmd5checkpw version 0.30, L<http://www.fehcom.de/qmail/smtpauth.html#PATCHES>

=back

For compatibility with the widely-used qmail auth patch from
L<http://members.elysium.pl/brush/qmail-smtpd-auth/>, the interface is
slightly different when using cryptographic authentication and B<compat 1>
is specified.

 login name terminated by \0, cryptographic key terminated by \0,
 encrypted password terminated by \0

The following implementations are known to use 'compat 1' interface:

=over 4

cmd5checkpw version 0.22, L<http://members.elysium.pl/brush/cmd5checkpw/>

qpasswd, L<http://www.mcmilk.de/projects/qpasswd/>

=back

The following implementations are known not to support cryptographic
authentication so the B<compat> setting is irrelevant.  These methods
are perfectly safe to use if restricted to TLS sessions:

=over 4

checkpassword itself, L<http://cr.yp.to/checkpwd.html>

checkvpw from vmailmgr 0.97, L<http://www.vmailmgr.org/>

=back


The remainder of the implementations listed at
L<http://www.qmail.org/top.html#checkpassword> are not known, please
contact Nick Leverton if you are able to provide any information.

=head1 AUTHORS

Original author Michael Holzt.  
Adapted by Johan Almqvist 2006-01-18.
Further adapted by Nick Leverton <nick@leverton.org> 2006-10-12

